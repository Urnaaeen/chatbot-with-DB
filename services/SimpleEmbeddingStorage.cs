using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;

namespace OracleDbConnection
{
    public class SimpleEmbeddingStorage
    {
        private readonly string _storageDirectory;
        private readonly string _dataFileName;

        public SimpleEmbeddingStorage(string storageDirectory = "column_embeddings")
        {
            _storageDirectory = storageDirectory;
            _dataFileName = Path.Combine(_storageDirectory, "column_embeddings.json");

            // Directory “Ø“Ø—Å–≥—ç—Ö
            Directory.CreateDirectory(_storageDirectory);
        }

        /// <summary>
        /// Embedding —Ñ–∞–π–ª –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        /// </summary>
        public bool EmbeddingFileExists()
        {
            return File.Exists(_dataFileName);
        }

        /// <summary>
        /// TABLE.COLUMN —Ç–µ–∫—Å—Ç“Ø“Ø–¥–∏–π–≥ embedding –±–æ–ª–≥–æ–∂ —Ñ–∞–π–ª–¥ —Ö–∞–¥–≥–∞–ª–∞—Ö
        /// </summary>
        public async Task SaveColumnEmbeddingsAsync(List<string> columnTexts, EmbeddingService embeddingService)
        {
            try
            {
                Console.WriteLine($"\nüíæ {columnTexts.Count} –±–∞–≥–∞–Ω—ã –º—ç–¥—ç—ç–ª–ª–∏–π–≥ embedding –±–æ–ª–≥–æ–∂ —Ö–∞–¥–≥–∞–ª–∂ –±–∞–π–Ω–∞...");

                var embeddings = new List<float[]>();

                // –ë–∞–≥–∞–Ω–∞ —Ç—É—Å –±“Ø—Ä–∏–π–≥ embedding —Ö–∏–π—Ö
                for (int i = 0; i < columnTexts.Count; i++)
                {
                    try
                    {
                        string columnText = columnTexts[i];
                        Console.WriteLine($"   üîÑ {i + 1}/{columnTexts.Count}: {columnText}");

                        // Embedding —Ö–∏–π—Ö
                        float[] embedding = await embeddingService.GetEmbeddingAsync(columnText);
                        embeddings.Add(embedding);

                        Console.WriteLine($"   ‚úÖ –ë—ç–ª—ç–Ω! ({embedding.Length} dimensions)");

                        // Rate limiting - 200ms —Ö“Ø–ª—ç—ç—Ö
                        await Task.Delay(200);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"   ‚ùå {columnTexts[i]} –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {ex.Message}");
                    }
                }

                // JSON —Ñ–∞–π–ª–¥ —Ö–∞–¥–≥–∞–ª–∞—Ö
                var jsonOptions = new JsonSerializerOptions
                {
                    WriteIndented = true
                };

                string jsonString = JsonSerializer.Serialize(embeddings, jsonOptions);
                await File.WriteAllTextAsync(_dataFileName, jsonString);

                Console.WriteLine($"\n‚úÖ –•–∞–¥–≥–∞–ª–∞–≥–¥–ª–∞–∞:");
                Console.WriteLine($"   üìä {embeddings.Count} –±–∞–≥–∞–Ω–∞");
                Console.WriteLine($"   üíæ –§–∞–π–ª: {_dataFileName}");

            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Embedding —Ö–∞–¥–≥–∞–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// –•–∞–¥–≥–∞–ª—Å–∞–Ω embedding ”©–≥”©–≥–¥–ª–∏–π–≥ —É–Ω—à–∏—Ö
        /// </summary>
        public async Task<List<float[]>> LoadColumnEmbeddingsAsync()
        {
            if (!EmbeddingFileExists())
                return null;

            try
            {
                string jsonString = await File.ReadAllTextAsync(_dataFileName);
                return JsonSerializer.Deserialize<List<float[]>>(jsonString);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Embedding —Ñ–∞–π–ª —É–Ω—à–∏—Ö –∞–ª–¥–∞–∞: {ex.Message}");
                return null;
            }
        }
    }

    /// <summary>
    /// Column embedding ”©–≥”©–≥–¥–ª–∏–π–Ω –±“Ø—Ç—ç—Ü
    /// </summary>
    public class ColumnEmbeddingData
    {
        public DateTime CreatedAt { get; set; }
        public int TotalColumns { get; set; }
        public Dictionary<string, float[]> ColumnEmbeddings { get; set; } = new();
    }
}