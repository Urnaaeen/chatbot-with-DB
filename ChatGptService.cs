// ChatGptService.cs
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace OracleDbConnection
{
    public class ChatGptService : IDisposable
    {
        private readonly HttpClient _httpClient;
        private readonly string _apiKey;

        public ChatGptService(string apiKey)
        {
            _apiKey = apiKey;
            _httpClient = new HttpClient();
            _httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {_apiKey}");
        }

        /// <summary>
        /// Oracle column –Ω—ç—Ä“Ø“Ø–¥—ç–¥ ChatGPT –∞—à–∏–≥–ª–∞–Ω –º–æ–Ω–≥–æ–ª —Ç–∞–π–ª–±–∞—Ä –Ω—ç–º—ç—Ö
        /// </summary>
        /// <param name="columnTexts">–ê–Ω—Ö–Ω—ã column –Ω—ç—Ä“Ø“Ø–¥</param>
        /// <returns>–ú–æ–Ω–≥–æ–ª —Ç–∞–π–ª–±–∞—Ä—Ç–∞–π column –Ω—ç—Ä“Ø“Ø–¥</returns>
        public async Task<List<string>> AddMongolianDescriptionsAsync(List<string> columnTexts)
        {
            if (columnTexts == null || columnTexts.Count == 0)
            {
                Console.WriteLine("‚ö†Ô∏è Column –∂–∞–≥—Å–∞–∞–ª—Ç —Ö–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞");
                return columnTexts ?? new List<string>();
            }

            var enhancedTexts = new List<string>();

            Console.WriteLine("ü§ñ ChatGPT-—ç—ç—Ä –º–æ–Ω–≥–æ–ª —Ç–∞–π–ª–±–∞—Ä –Ω—ç–º–∂ –±–∞–π–Ω–∞...");
            Console.WriteLine($"   üìù {columnTexts.Count} column –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∂ –±–∞–π–Ω–∞...");

            try
            {
                var prompt = CreateMongolianDescriptionPrompt(columnTexts);
                var response = await CallChatGptApiAsync(prompt);
                enhancedTexts = ParseChatGptResponse(response);

                if (enhancedTexts.Count == columnTexts.Count)
                {
                    Console.WriteLine($"‚úÖ {enhancedTexts.Count} column-–¥ –º–æ–Ω–≥–æ–ª —Ç–∞–π–ª–±–∞—Ä –∞–º–∂–∏–ª—Ç—Ç–∞–π –Ω—ç–º—ç–≥–¥–ª—ç—ç");
                }
                else
                {
                    Console.WriteLine($"‚ö†Ô∏è ChatGPT —Ö–∞—Ä–∏—É —Ç–æ–æ —Ç–∞–∞—Ä–∞—Ö–≥“Ø–π –±–∞–π–Ω–∞. –ê–Ω—Ö–Ω—ã –∂–∞–≥—Å–∞–∞–ª—Ç–∞–∞—Ä “Ø—Ä–≥—ç–ª–∂–ª“Ø“Ø–ª–Ω—ç...");
                    return columnTexts;
                }

                return enhancedTexts;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå ChatGPT API –∞–ª–¥–∞–∞: {ex.Message}");
                Console.WriteLine("‚ö†Ô∏è –ê–Ω—Ö–Ω—ã column –Ω—ç—Ä“Ø“Ø–¥—ç—ç—Ä “Ø—Ä–≥—ç–ª–∂–ª“Ø“Ø–ª–Ω—ç...");
                return columnTexts;
            }
        }

        /// <summary>
        /// ChatGPT-–¥ –∏–ª–≥—ç—ç—Ö prompt “Ø“Ø—Å–≥—ç—Ö
        /// </summary>
        private string CreateMongolianDescriptionPrompt(List<string> columnTexts)
        {
            var sb = new StringBuilder();
            sb.AppendLine("–î–æ–æ—Ä—Ö Oracle database column –Ω—ç—Ä“Ø“Ø–¥—ç–¥ –º–æ–Ω–≥–æ–ª —Ç–∞–π–ª–±–∞—Ä –Ω—ç–º.");
            sb.AppendLine("–ñ–∏—à—ç—ç: BI_HREMPLOYEE.COMPANYNAME -> BI_HREMPLOYEE.COMPANYNAME (–ö–æ–º–ø–∞–Ω–∏–π –Ω—ç—Ä)");
            sb.AppendLine("–ó”©–≤—Ö”©–Ω “Ø—Ä –¥“Ø–Ω–≥ –ª —Ö–∞—Ä—É—É–ª, —Ç–∞–π–ª–±–∞—Ä –±“Ø“Ø ”©–≥. –ú”©—Ä –±“Ø—Ä–∏–π–≥ '-' —Ç—ç–º–¥–≥—ç—ç—Ä —ç—Ö–ª“Ø“Ø–ª:");
            sb.AppendLine();

            foreach (var columnText in columnTexts)
            {
                sb.AppendLine($"- {columnText}");
            }

            return sb.ToString();
        }

        /// <summary>
        /// ChatGPT API –¥—É—É–¥–∞—Ö
        /// </summary>
        private async Task<string> CallChatGptApiAsync(string prompt)
        {
            var requestBody = new
            {
                model = "gpt-3.5-turbo",
                messages = new[]
                {
                    new
                    {
                        role = "system",
                        content = "–¢–∞ MongoDB column –Ω—ç—Ä“Ø“Ø–¥—ç–¥ –º–æ–Ω–≥–æ–ª —Ç–∞–π–ª–±–∞—Ä –Ω—ç–º–¥—ç–≥ —Ç—É—Å–ª–∞—Ö –ø—Ä–æ–≥—Ä–∞–º —é–º. –¢–æ–≤—á –±”©–≥”©”©–¥ –æ–π–ª–≥–æ–º–∂—Ç–æ–π —Ç–∞–π–ª–±–∞—Ä ”©–≥–Ω”© “Ø“Ø."
                    },
                    new
                    {
                        role = "user",
                        content = prompt
                    }
                },
                max_tokens = 3000,
                temperature = 0.3
            };

            var json = JsonConvert.SerializeObject(requestBody);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await _httpClient.PostAsync("https://api.openai.com/v1/chat/completions", content);
            response.EnsureSuccessStatusCode();

            var responseJson = await response.Content.ReadAsStringAsync();
            dynamic responseObj = JsonConvert.DeserializeObject(responseJson);

            return responseObj.choices[0].message.content.ToString();
        }

        /// <summary>
        /// ChatGPT —Ö–∞—Ä–∏—É–≥ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö
        /// </summary>
        private List<string> ParseChatGptResponse(string response)
        {
            var enhancedTexts = new List<string>();
            var lines = response.Split('\n', StringSplitOptions.RemoveEmptyEntries);

            foreach (var line in lines)
            {
                var trimmedLine = line.Trim();
                if (!string.IsNullOrEmpty(trimmedLine) && trimmedLine.StartsWith("-"))
                {
                    // "-" —Ç—ç–º–¥–≥–∏–π–≥ –∞—Ä–∏–ª–≥–∞—Ö
                    var cleanedLine = trimmedLine.Substring(1).Trim();
                    if (!string.IsNullOrEmpty(cleanedLine))
                    {
                        enhancedTexts.Add(cleanedLine);
                    }
                }
            }

            Console.WriteLine("\nüìå –•“Ø—Å–Ω—ç–≥—Ç“Ø“Ø–¥–∏–π–Ω –±–∞–≥–∞–Ω–∞ –º—ç–¥—ç—ç–ª—ç–ª:");
                    foreach (var entry in enhancedTexts)
                    {
                        Console.WriteLine($"   - {entry}");
                    }

            return enhancedTexts;
        }

        public void Dispose()
        {
            _httpClient?.Dispose();
        }
    }
}