using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

namespace OracleDbConnection
{
    public class EmbeddingService
    {
        private readonly HttpClient _httpClient;
        private readonly string _apiKey;
        private readonly string _model;

        public EmbeddingService(string apiKey, string model = "text-embedding-3-large")
        {
            _apiKey = apiKey;
            _model = model;
            _httpClient = new HttpClient();
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _apiKey);
        }

        /// <summary>
        /// –¢–µ–∫—Å—Ç–∏–π–≥ embedding –±–æ–ª–≥–æ—Ö
        /// </summary>
        /// <param name="inputText">Embedding —Ö–∏–π—Ö —Ç–µ–∫—Å—Ç</param>
        /// <returns>Float array embedding</returns>
        public async Task<float[]> GetEmbeddingAsync(string inputText)
        {
            try
            {
                var requestBody = new
                {
                    input = inputText,
                    model = _model
                };

                var content = new StringContent(
                    JsonSerializer.Serialize(requestBody), 
                    Encoding.UTF8, 
                    "application/json"
                );

                var response = await _httpClient.PostAsync("https://api.openai.com/v1/embeddings", content);
                response.EnsureSuccessStatusCode();

                var responseString = await response.Content.ReadAsStringAsync();
                using JsonDocument json = JsonDocument.Parse(responseString);
                
                var embeddingJson = json.RootElement
                    .GetProperty("data")[0]
                    .GetProperty("embedding");
                
                float[] embedding = embeddingJson
                    .EnumerateArray()
                    .Select(x => (float)x.GetDouble())
                    .ToArray();

                return embedding;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Embedding —Ö–∏–π—Ö—ç–¥ –∞–ª–¥–∞–∞: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// –û–ª–æ–Ω —Ç–µ–∫—Å—Ç–∏–π–≥ batch-–∞–∞—Ä embedding —Ö–∏–π—Ö
        /// </summary>
        /// <param name="texts">Embedding —Ö–∏–π—Ö —Ç–µ–∫—Å—Ç“Ø“Ø–¥–∏–π–Ω –∂–∞–≥—Å–∞–∞–ª—Ç</param>
        /// <returns>Embedding-“Ø“Ø–¥–∏–π–Ω –∂–∞–≥—Å–∞–∞–ª—Ç</returns>
        public async Task<List<float[]>> GetBatchEmbeddingsAsync(List<string> texts)
        {
            var embeddings = new List<float[]>();
            
            // OpenAI API rate limit-–∏–π–Ω —É–ª–º–∞–∞—Å batch —Ö–∏–π—Ö
            int batchSize = 20; // –ù—ç–≥ —É–¥–∞–∞–¥ 20 —Ç–µ–∫—Å—Ç
            
            for (int i = 0; i < texts.Count; i += batchSize)
            {
                var batch = texts.Skip(i).Take(batchSize).ToList();
                
                try
                {
                    var requestBody = new
                    {
                        input = batch,
                        model = _model
                    };

                    var content = new StringContent(
                        JsonSerializer.Serialize(requestBody), 
                        Encoding.UTF8, 
                        "application/json"
                    );

                    var response = await _httpClient.PostAsync("https://api.openai.com/v1/embeddings", content);
                    response.EnsureSuccessStatusCode();

                    var responseString = await response.Content.ReadAsStringAsync();
                    using JsonDocument json = JsonDocument.Parse(responseString);
                    
                    var dataArray = json.RootElement.GetProperty("data");
                    
                    foreach (var item in dataArray.EnumerateArray())
                    {
                        var embeddingJson = item.GetProperty("embedding");
                        float[] embedding = embeddingJson
                            .EnumerateArray()
                            .Select(x => (float)x.GetDouble())
                            .ToArray();
                        embeddings.Add(embedding);
                    }

                    // Rate limit-–∏–π–≥ –∑”©”©–ª—Ä“Ø“Ø–ª—ç—Ö
                    if (i + batchSize < texts.Count)
                    {
                        await Task.Delay(1000); // 1 —Å–µ–∫—É–Ω–¥ —Ö“Ø–ª—ç—ç—Ö
                    }

                    Console.WriteLine($"‚úÖ Batch {i / batchSize + 1}: {batch.Count} —Ç–µ–∫—Å—Ç –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞–≥–¥–ª–∞–∞");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå Batch {i / batchSize + 1} –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {ex.Message}");
                    throw;
                }
            }

            return embeddings;
        }

        /// <summary>
        /// –•“Ø—Å–Ω—ç–≥—Ç–∏–π–Ω –±“Ø—Ö –±–∞–≥–∞–Ω–∞ –Ω—ç—Ä–∏–π–≥ embedding –±–æ–ª–≥–æ—Ö
        /// </summary>
        /// <param name="tableColumns">–•“Ø—Å–Ω—ç–≥—Ç –±–æ–ª–æ–Ω –±–∞–≥–∞–Ω—ã–Ω –º—ç–¥—ç—ç–ª—ç–ª</param>
        /// <returns>–ë–∞–≥–∞–Ω–∞ –Ω—ç—Ä –±–æ–ª–æ–Ω —Ç“Ø“Ø–Ω–∏–π embedding</returns>
        public async Task<Dictionary<string, Dictionary<string, float[]>>> GetTableColumnsEmbeddingsAsync(
            Dictionary<string, List<string>> tableColumns)
        {
            var result = new Dictionary<string, Dictionary<string, float[]>>();
            
            Console.WriteLine("\nüîÑ –•“Ø—Å–Ω—ç–≥—Ç–∏–π–Ω –±–∞–≥–∞–Ω—ã–≥ embedding —Ö–∏–π–∂ –±–∞–π–Ω–∞...");
            
            foreach (var table in tableColumns)
            {
                string tableName = table.Key;
                List<string> columns = table.Value;
                
                Console.WriteLine($"\nüìä {tableName} —Ö“Ø—Å–Ω—ç–≥—Ç–∏–π–Ω {columns.Count} –±–∞–≥–∞–Ω—ã–≥ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∂ –±–∞–π–Ω–∞...");
                
                var columnEmbeddings = new Dictionary<string, float[]>();
                
                // –ë–∞–≥–∞–Ω–∞ —Ç—É—Å –±“Ø—Ä–∏–π–≥ embedding —Ö–∏–π—Ö
                for (int i = 0; i < columns.Count; i++)
                {
                    try
                    {
                        string columnInfo = columns[i];
                        
                        // Embedding —Ö–∏–π—Ö
                        float[] embedding = await GetEmbeddingAsync(columnInfo);
                        columnEmbeddings[columnInfo] = embedding;
                        
                        Console.WriteLine($"   ‚úÖ {i + 1}/{columns.Count}: {columnInfo}");
                        
                        // Rate limit-–∏–π–≥ –∑”©”©–ª—Ä“Ø“Ø–ª—ç—Ö
                        await Task.Delay(200); // 200ms —Ö“Ø–ª—ç—ç—Ö
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"   ‚ùå {columns[i]} –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {ex.Message}");
                    }
                }
                
                result[tableName] = columnEmbeddings;
            }
            
            Console.WriteLine("\n‚úÖ –ë“Ø—Ö –±–∞–≥–∞–Ω—ã–Ω embedding –¥—É—É—Å–ª–∞–∞!");
            return result;
        }

        /// <summary>
        /// –†–µ—Å—É—Ä—Å —Ü—ç–≤—ç—Ä–ª—ç—Ö
        /// </summary>
        public void Dispose()
        {
            _httpClient?.Dispose();
        }
    }
}